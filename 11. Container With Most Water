Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
Example 3:

Input: height = [4,3,2,1,4]
Output: 16
Example 4:

Input: height = [1,2,1]
Output: 2
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104

Answer:
height1 = [1,8,6,2,5,4,8,3,7]

def maxArea(height):
        """
        :type height: List[int]
        :rtype: int
        """
        'start from left end and right end tgt
        i,j = 0,len(height)-1
        max_area = 0
        while i < j:
            max_area = max((j-i) * min(height[i],height[j]),max_area)
            'print(i,j,j-i,max_area)
            'if left end < right end, move left end +1 to find a greater number
            if (height[i] < height[j]):
                i += 1
            else:
                j -= 1
        return max_area

        '''JR Solution:
        h_length = len(height)
        area = 0
        max_area = 0
        full_list = []
        for i in range(0,h_length):
            for x in range(i+1,h_length):
                if(height[i] <= height[x]):
                    area = height[i] * (x-i)
                else:
                    area = height[x] * (x-i)
                full_list.append(area)

                if(area > max_area):
                    max_area = area
        return max_area
        '''
        
print(maxArea(height1))
